[package]
name = "allow_prefixed"

# Did you also update version in
# - ../allow
# - ../allow_tests
# - ../allow_tests/tests/internal_checks/incorrect_lint - TODO confirm
version = "0.2.0"

edition = "2018"
# Because of https://github.com/dtolnay/rustversion we can't support before 1.31. However, to use
# `::allow_internal::path_to_str_literal!($lint_path)` we also need proc macros in expression
# positions: https://github.com/rust-lang/rust/pull/68717. Hence, we require 1.45+.
#
# See also ../README.md.
#
# If we used edition = "2021", we'd have to require Rust 1.56+. For down to Rust 1.45 we need
# edition 2018.
#
rust-version = "1.45"

build = "build.rs"

description = "Implementation of 'allow' crate, exported with no prefix (for prefixless lints), and with clippy_ and rustoc_ prefixes."

# Same across allow, allow_preferred and allow_internal:
authors = ["Peter Kehl <peter.kehl@gmail.com>"]
categories = ["development-tools", "rust-patterns"]
keywords = ["alias", "lint", "linting", "lints", "semantic"]
documentation = "https://docs.rs/allow_prefixed"
license = "MIT OR Apache-2.0"
repository = "https://github.com/coop-rs/allow"
homepage = "https://github.com/coop-rs/allow"
readme = "../README_crates_io.md"

[features]
# Enable nightly-only features. Those are subject to break even in minor version updates! Mutually
# exclusive to `no_nightly` feature.
nightly = []
# Fail if `nightly` feature is enabled. (Mutually exclusive to `nightly` feature.) Useful to prevent
# any dependencies from introducing `nightly`-only functionality.
no_nightly = []
# When enabled, do not complain about use of any "dummy" lint macros. Those are now empty macros
# (which pass their input code as-is). They exist for backwards compatibility for lints that have
# been removed (usually `clippy::` lints moved to prefixless, standard lints). This feature can be
# overriden by `scream_past_dummies`.
silent_past_dummies = []
# When enabled, complain about use of any "dummy" lint macros - regardless of `silent_past_dummies`.
scream_past_dummies = []

# TODO consider
# fixed_toolchains_conservative = []


[lib]
proc-macro = true
# @TODO check if any unit tests:
test = true     # we have unit tests
doctest = false # but no doc tests

[dependencies]
rustversion = "1.0"
allow_internal = { path = "../allow_internal", version = "0.1.1" }

[build-dependencies]
rustversion = "1.0"
cargo-toolchain = "0.1.0"
